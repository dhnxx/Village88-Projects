version: "3.8"
services:
    db:
      image: mysql:5.7 # instructs Docker that the db service is going to use a MySQL image version 5.7
      restart: always
      volumes:
        # db_data is a name we set for the /var/lib/mysql2 path (We can change db_data to whatever) 
        # that we can then use to share data between two or more services.
        - db_data:/var/lib/mysql2
        # this is a way for us to auto IMPORT a .sql file to the database in your MySQL container
        # it auto imports the db.sql file in the mysql-dump folder
        - ./mysql-dump:/docker-entrypoint-initdb.d
      environment: # It creates the MySQL credentials for us, as well as a database called hh. This is the credential you'll need in order for your express app to communicate with the MySQL service. 
        MYSQL_ROOT_PASSWORD: password
        MYSQL_DATABASE: hh
      ports:
          #Public port is 3307 (or you can think any port number as long as there's no conflict). We can connect to our mysql container through Workbench using this port.
         # Private port for MySQL is 3306. Meaning, that this port is exclusively to be used only inside our Docker. 
        - 3307:3306
    web_app:
      depends_on: # This will tell Docker to start services in dependency order. In this example, before starting the web_app service, it waits for db to be started.
        - db
      build: ./
      restart: always
      command: npm start
      volumes:
        # This maps our host project files to our container's work directory. Whatever changes we make to our local copy, will reflect those changes to our work directory copy.
        - ./src:/var/www/app/src
        - ./package.json:/var/www/app/package.json
      ports:        
        - 3001:3000
volumes: # it means that that specified volume (in this case, db_data) is available to all services (both app and db).
    db_data: {}